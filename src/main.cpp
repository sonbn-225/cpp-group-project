#include <iostream>
#include <string>
#include <limits> // Required for std::numeric_limits
#include <vector>
#include <iomanip> // For std::setw

#include "Constants.h"
#include "Utils.h"
#include "DataStorage.h"
#include "AuthService.h"
#include "WalletService.h"

// Function prototypes for menu handlers
void showMainMenu(AuthService& auth);
void showUserMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage);
void showAdminMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage);

void handleLogin(AuthService& auth);
void handleRegister(AuthService& auth);
void handleChangePassword(AuthService& auth);
void handleUpdateProfile(AuthService& auth, DataStorage& storage); // Pass storage if needed
void handleSetupOTP(AuthService& auth);
void handleDisableOTP(AuthService& auth);


void handleViewBalance(AuthService& auth, WalletService& walletSvc);
void handleTransferPoints(AuthService& auth, WalletService& walletSvc);
void handleViewTransactionHistory(AuthService& auth, WalletService& walletSvc);

// Admin specific
void handleAdminListUsers(DataStorage& storage);
void handleAdminCreateUser(AuthService& auth);
void handleAdminEditUser(AuthService& auth, DataStorage& storage);
void handleAdminFundWallet(AuthService& auth, WalletService& walletSvc);
void handleAdminLockUnlockUser(DataStorage& storage);


int main() {
    DataStorage storage; // Loads data on construction
    AuthService authSvc(storage);
    WalletService walletSvc(storage, authSvc);

    // Check if admin account needs to be created (initial setup)
    // This is now handled in DataStorage constructor

    int choice;
    while (true) {
        Utils::clearScreen();
        if (!authSvc.isLoggedIn()) {
            showMainMenu(authSvc);
            std::cout << "Lua chon cua ban: ";
            std::cin >> choice;
             if (std::cin.fail()) {
                std::cin.clear(); // clear input buffer to restore cin to a usable state
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // ignore last input
                choice = -1; // Invalid choice
            } else {
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // consume newline
            }


            switch (choice) {
                case 1: handleLogin(authSvc); break;
                case 2: handleRegister(authSvc); break;
                case 0:
                    std::cout << "Tam biet!" << std::endl;
                    storage.saveUsers(); // Ensure all data is saved before exit
                    storage.saveWallets();
                    return 0;
                default:
                    std::cout << "Lua chon khong hop le. Vui long thu lai." << std::endl;
            }
        } else {
            UserAccount* currentUser = authSvc.getCurrentUser();
            if (currentUser->isPasswordAutoGenerated) {
                 std::cout << "Mat khau cua ban la mat khau tu dong sinh." << std::endl;
                 std::cout << "Ban PHAI thay doi mat khau truoc khi tiep tuc." << std::endl;
                 std::string newPassword, confirmPassword;
                 do {
                    std::cout << "Nhap mat khau moi: ";
                    std::cin >> newPassword;
                    std::cout << "Xac nhan mat khau moi: ";
                    std::cin >> confirmPassword;
                    if (newPassword != confirmPassword) {
                        std::cout << "Mat khau xac nhan khong khop. Vui long thu lai." << std::endl;
                    }
                 } while (newPassword != confirmPassword);
                 std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                 authSvc.forceChangePassword(currentUser, newPassword);
                 // After forced change, user might want to proceed to their menu
            }


            if (currentUser->role == UserRole::ADMIN_USER) {
                showAdminMenu(authSvc, walletSvc, storage);
            } else {
                showUserMenu(authSvc, walletSvc, storage);
            }
        }
        if (authSvc.isLoggedIn() && choice !=0) Utils::pauseExecution(); // Pause only if logged in and not exiting immediately
        else if (!authSvc.isLoggedIn() && choice !=0 ) Utils::pauseExecution();

    }

    return 0;
}

void showMainMenu(AuthService& auth) {
    std::cout << "\n===== HE THONG DANG NHAP & VI DIEM THUONG =====" << std::endl;
    std::cout << "1. Dang Nhap" << std::endl;
    std::cout << "2. Dang Ky" << std::endl;
    std::cout << "0. Thoat" << std::endl;
    std::cout << "==============================================" << std::endl;
}

void showUserMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage) {
    int choice;
    UserAccount* user = auth.getCurrentUser();
    std::cout << "\n===== MENU NGUOI DUNG (" << user->username << ") =====" << std::endl;
    std::cout << "--- Tai Khoan ---" << std::endl;
    std::cout << "1. Xem Thong Tin Ca Nhan" << std::endl;
    std::cout << "2. Cap Nhat Thong Tin Ca Nhan" << std::endl;
    std::cout << "3. Doi Mat Khau" << std::endl;
    std::cout << "4. Thiet Lap/Quan Ly OTP" << std::endl;
    std::cout << "--- Vi Diem ---" << std::endl;
    std::cout << "5. Xem So Du Vi" << std::endl;
    std::cout << "6. Chuyen Diem" << std::endl;
    std::cout << "7. Xem Lich Su Giao Dich" << std::endl;
    std::cout << "--------------------------" << std::endl;
    std::cout << "0. Dang Xuat" << std::endl;
    std::cout << "==============================================" << std::endl;
    std::cout << "Lua chon cua ban: ";
    std::cin >> choice;
    if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        choice = -1;
    } else {
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }


    switch (choice) {
        case 1: // View profile
            std::cout << "\n--- Thong Tin Ca Nhan ---" << std::endl;
            std::cout << "Ten dang nhap: " << user->username << std::endl;
            std::cout << "Ho ten: " << user->fullName << std::endl;
            std::cout << "Email: " << user->email << std::endl;
            std::cout << "So dien thoai: " << (user->phoneNumber.empty() ? "(chua co)" : user->phoneNumber) << std::endl;
            std::cout << "OTP kich hoat: " << (user->isOtpEnabled ? "Co" : "Khong") << std::endl;
            std::cout << "ID Vi: " << user->walletId << std::endl;
            break;
        case 2: handleUpdateProfile(auth, storage); break;
        case 3: handleChangePassword(auth); break;
        case 4:
            std::cout << "\n--- Quan Ly OTP ---" << std::endl;
            std::cout << "1. Kich hoat OTP" << std::endl;
            std::cout << "2. Vo hieu hoa OTP" << std::endl;
            std::cout << "0. Quay lai" << std::endl;
            std::cout << "Lua chon OTP: ";
            int otpChoice;
            std::cin >> otpChoice;
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                otpChoice = -1;
            } else {
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            }
            if (otpChoice == 1) handleSetupOTP(auth);
            else if (otpChoice == 2) handleDisableOTP(auth);
            break;
        case 5: handleViewBalance(auth, walletSvc); break;
        case 6: handleTransferPoints(auth, walletSvc); break;
        case 7: handleViewTransactionHistory(auth, walletSvc); break;
        case 0: auth.logout(); break;
        default: std::cout << "Lua chon khong hop le." << std::endl;
    }
}

void showAdminMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage) {
    int choice;
    UserAccount* admin = auth.getCurrentUser();
    std::cout << "\n===== MENU QUAN TRI VIEN (" << admin->username << ") =====" << std::endl;
    std::cout << "--- Tai Khoan Ca Nhan Admin ---" << std::endl;
    std::cout << "1. Xem Thong Tin Ca Nhan" << std::endl;
    std::cout << "2. Cap Nhat Thong Tin Ca Nhan" << std::endl;
    std::cout << "3. Doi Mat Khau" << std::endl;
    std::cout << "4. Thiet Lap/Quan Ly OTP (cho tai khoan admin)" << std::endl;
    std::cout << "--- Quan Ly Nguoi Dung ---" << std::endl;
    std::cout << "10. Liet Ke Danh Sach Nguoi Dung" << std::endl;
    std::cout << "11. Tao Tai Khoan Nguoi Dung Moi" << std::endl;
    std::cout << "12. Chinh Sua Thong Tin Nguoi Dung (lam ho)" << std::endl;
    std::cout << "13. Khoa/Mo Khoa Tai Khoan Nguoi Dung" << std::endl;
    std::cout << "--- Quan Ly Vi Diem ---" << std::endl;
    std::cout << "20. Xem So Du Vi (cua admin)" << std::endl;
    std::cout << "21. Chuyen Diem (tu vi admin)" << std::endl;
    std::cout << "22. Xem Lich Su Giao Dich (cua admin)" << std::endl;
    std::cout << "23. Nap Diem Vao Vi Nguoi Dung (tu Vi Tong)" << std::endl;
    std::cout << "--------------------------" << std::endl;
    std::cout << "0. Dang Xuat" << std::endl;
    std::cout << "==============================================" << std::endl;
    std::cout << "Lua chon cua ban: ";
    std::cin >> choice;
     if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        choice = -1;
    } else {
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }

    switch (choice) {
        // Admin's personal account management (same as user)
        case 1:
            std::cout << "\n--- Thong Tin Ca Nhan Admin ---" << std::endl;
            std::cout << "Ten dang nhap: " << admin->username << std::endl;
            std::cout << "Ho ten: " << admin->fullName << std::endl;
            std::cout << "Email: " << admin->email << std::endl;
            std::cout << "So dien thoai: " << (admin->phoneNumber.empty() ? "(chua co)" : admin->phoneNumber) << std::endl;
            std::cout << "OTP kich hoat: " << (admin->isOtpEnabled ? "Co" : "Khong") << std::endl;
            std::cout << "ID Vi: " << admin->walletId << std::endl;
            break;
        case 2: handleUpdateProfile(auth, storage); break; // Updates current (admin) user
        case 3: handleChangePassword(auth); break;        // Changes current (admin) user's password
        case 4:
            std::cout << "\n--- Quan Ly OTP cho Admin ---" << std::endl;
            std::cout << "1. Kich hoat OTP" << std::endl;
            std::cout << "2. Vo hieu hoa OTP" << std::endl;
            std::cout << "0. Quay lai" << std::endl;
            std::cout << "Lua chon OTP: ";
            int otpChoice;
            std::cin >> otpChoice;
            if (std::cin.fail()) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                otpChoice = -1;
            } else {
                 std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            }

            if (otpChoice == 1) handleSetupOTP(auth);
            else if (otpChoice == 2) handleDisableOTP(auth);
            break;

        // User Management
        case 10: handleAdminListUsers(storage); break;
        case 11: handleAdminCreateUser(auth); break;
        case 12: handleAdminEditUser(auth, storage); break;
        case 13: handleAdminLockUnlockUser(storage); break;

        // Wallet Management (for admin's own wallet and system wallets)
        case 20: handleViewBalance(auth, walletSvc); break; // Admin's own balance
        case 21: handleTransferPoints(auth, walletSvc); break; // Transfer from admin's wallet
        case 22: handleViewTransactionHistory(auth, walletSvc); break; // Admin's own history
        case 23: handleAdminFundWallet(auth, walletSvc); break;

        case 0: auth.logout(); break;
        default: std::cout << "Lua chon khong hop le." << std::endl;
    }
}


void handleLogin(AuthService& auth) {
    std::string username, password;
    std::cout << "\n--- Dang Nhap ---" << std::endl;
    std::cout << "Ten dang nhap: ";
    std::cin >> username;
    std::cout << "Mat khau: ";
    std::cin >> password;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    auth.login(username, password);
}

void handleRegister(AuthService& auth) {
    std::string username, password, fullName, email, phone;
    std::cout << "\n--- Dang Ky Tai Khoan Moi ---" << std::endl;
    std::cout << "Ten dang nhap: ";
    std::cin >> username;
    std::cout << "Mat khau (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
    std::cin >> password;
    std::cout << "Ho ten day du: ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // consume leftover newline
    std::getline(std::cin, fullName);
    std::cout << "Email: ";
    std::cin >> email;
    std::cout << "So dien thoai (bo trong neu khong co): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, phone);

    auth.registerUser(username, password, fullName, email, phone);
}

void handleChangePassword(AuthService& auth) {
    if (!auth.isLoggedIn()) {
        std::cout << "Ban can dang nhap de thuc hien chuc nang nay." << std::endl;
        return;
    }
    std::string oldPassword, newPassword, confirmPassword;
    std::cout << "\n--- Doi Mat Khau ---" << std::endl;
    std::cout << "Mat khau cu: ";
    std::cin >> oldPassword;
    do {
        std::cout << "Mat khau moi (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
        std::cin >> newPassword;
        std::cout << "Xac nhan mat khau moi: ";
        std::cin >> confirmPassword;
        if (newPassword != confirmPassword) {
            std::cout << "Mat khau xac nhan khong khop. Vui long thu lai." << std::endl;
        }
    } while (newPassword != confirmPassword);
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    auth.changePassword(auth.getCurrentUser(), oldPassword, newPassword);
}

void handleUpdateProfile(AuthService& auth, DataStorage& storage) {
    if (!auth.isLoggedIn()) {
        std::cout << "Ban can dang nhap de thuc hien chuc nang nay." << std::endl;
        return;
    }
    UserAccount* userToUpdate = auth.getCurrentUser(); // By default, user updates their own profile. Admin case handled in admin menu.
    std::string fullName, email, phone;

    std::cout << "\n--- Cap Nhat Thong Tin Ca Nhan ---" << std::endl;
    std::cout << "Ho ten hien tai: " << userToUpdate->fullName << std::endl;
    std::cout << "Nhap ho ten moi (bo trong de giu nguyen): ";
    // std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Already consumed by menu
    std::getline(std::cin, fullName);

    std::cout << "Email hien tai: " << userToUpdate->email << std::endl;
    std::cout << "Nhap email moi (bo trong de giu nguyen): ";
    std::getline(std::cin, email);

    std::cout << "So dien thoai hien tai: " << (userToUpdate->phoneNumber.empty() ? "(chua co)" : userToUpdate->phoneNumber) << std::endl;
    std::cout << "Nhap so dien thoai moi (bo trong de giu nguyen): ";
    std::getline(std::cin, phone);

    auth.updateUserProfile(userToUpdate,
                           fullName.empty() ? userToUpdate->fullName : fullName,
                           email.empty() ? userToUpdate->email : email,
                           phone.empty() ? userToUpdate->phoneNumber : phone);
}


void handleSetupOTP(AuthService& auth) {
    if (!auth.isLoggedIn()) return;
    auth.setupOTP(auth.getCurrentUser());
}
void handleDisableOTP(AuthService& auth) {
     if (!auth.isLoggedIn()) return;
    auth.disableOTP(auth.getCurrentUser(), ""); // Pass empty string for now, logic inside disableOTP will ask for OTP
}


void handleViewBalance(AuthService& auth, WalletService& walletSvc) {
    if (!auth.isLoggedIn()) return;
    walletSvc.viewBalance(auth.getCurrentUser());
}

void handleTransferPoints(AuthService& auth, WalletService& walletSvc) {
    if (!auth.isLoggedIn()) return;
    long long recipientWalletId;
    double amount;
    std::string description;

    std::cout << "\n--- Chuyen Diem ---" << std::endl;
    std::cout << "Nhap ID Vi nguoi nhan: ";
    std::cin >> recipientWalletId;
    if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cerr << "ID Vi khong hop le." << std::endl;
        return;
    }
    std::cout << "Nhap so diem muon chuyen: ";
    std::cin >> amount;
     if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cerr << "So diem khong hop le." << std::endl;
        return;
    }
    std::cout << "Nhap mo ta giao dich (bo trong neu khong co): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, description);

    walletSvc.transferPoints(auth.getCurrentUser(), recipientWalletId, amount, description);
}

void handleViewTransactionHistory(AuthService& auth, WalletService& walletSvc) {
    if (!auth.isLoggedIn()) return;
    walletSvc.viewTransactionHistory(auth.getCurrentUser());
}

// --- Admin Functions Implementation ---
void handleAdminListUsers(DataStorage& storage) {
    std::cout << "\n--- Danh Sach Nguoi Dung ---" << std::endl;
    std::cout << std::left << std::setw(20) << "Ten Dang Nhap"
              << std::setw(30) << "Ho Ten"
              << std::setw(30) << "Email"
              << std::setw(15) << "Vai Tro"
              << std::setw(10) << "Bi Khoa" << std::endl;
    std::cout << std::string(105, '-') << std::endl;

    if (storage.users.empty()) {
        std::cout << "Khong co nguoi dung nao trong he thong." << std::endl;
    } else {
        for (const auto& user : storage.users) {
            std::cout << std::left << std::setw(20) << user.username
                      << std::setw(30) << user.fullName
                      << std::setw(30) << user.email
                      << std::setw(15) << (user.role == UserRole::ADMIN_USER ? "Admin" : "User")
                      << std::setw(10) << (user.isLocked ? "Co" : "Khong") << std::endl;
        }
    }
    std::cout << "--------------------------" << std::endl;
}

void handleAdminCreateUser(AuthService& auth) {
    std::string username, password, fullName, email, phone, roleStr;
    UserRole role = UserRole::REGULAR_USER;
    bool autoPass = false;

    std::cout << "\n--- Tao Tai Khoan Nguoi Dung Moi (Admin) ---" << std::endl;
    std::cout << "Ten dang nhap: "; std::cin >> username;
    std::cout << "Ho ten day du: "; std::cin.ignore(); std::getline(std::cin, fullName);
    std::cout << "Email: "; std::cin >> email;
    std::cout << "So dien thoai (bo trong neu khong co): "; std::cin.ignore(); std::getline(std::cin, phone);
    std::cout << "Vai tro (USER/ADMIN) [USER]: "; std::getline(std::cin, roleStr);
    if (roleStr == "ADMIN" || roleStr == "admin") role = UserRole::ADMIN_USER;

    char choiceAutoPass;
    std::cout << "Tu dong tao mat khau? (y/n) [y]: ";
    std::cin >> choiceAutoPass;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Consume newline
    if (choiceAutoPass == 'y' || choiceAutoPass == 'Y' || choiceAutoPass == '\n') { // Check for enter key as well
        autoPass = true;
        password = Utils::generateRandomPassword();
        std::cout << "Mat khau tu dong tao: " << password << std::endl;
    } else {
        std::cout << "Nhap mat khau (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
        std::cin >> password;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }

    auth.registerUser(username, password, fullName, email, phone, role, autoPass, auth.getCurrentUser());
}

void handleAdminEditUser(AuthService& auth, DataStorage& storage) {
    std::string usernameToEdit;
    std::cout << "\n--- Chinh Sua Thong Tin Nguoi Dung (Admin) ---" << std::endl;
    std::cout << "Nhap ten dang nhap cua nguoi dung can chinh sua: ";
    std::cin >> usernameToEdit;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');


    UserAccount* userToUpdate = storage.findUser(usernameToEdit);
    if (!userToUpdate) {
        std::cerr << "Khong tim thay nguoi dung: " << usernameToEdit << std::endl;
        return;
    }

    std::string newFullName, newEmail, newPhone;
    std::cout << "Thong tin hien tai cua " << usernameToEdit << ":" << std::endl;
    std::cout << "  Ho ten: " << userToUpdate->fullName << std::endl;
    std::cout << "  Email: " << userToUpdate->email << std::endl;
    std::cout << "  So dien thoai: " << (userToUpdate->phoneNumber.empty() ? "(chua co)" : userToUpdate->phoneNumber) << std::endl;

    std::cout << "Nhap ho ten moi (bo trong de giu nguyen): ";
    std::getline(std::cin, newFullName);
    std::cout << "Nhap email moi (bo trong de giu nguyen): ";
    std::getline(std::cin, newEmail);
    std::cout << "Nhap so dien thoai moi (bo trong de giu nguyen): ";
    std::getline(std::cin, newPhone);

    auth.updateUserProfile(userToUpdate,
                           newFullName.empty() ? userToUpdate->fullName : newFullName,
                           newEmail.empty() ? userToUpdate->email : newEmail,
                           newPhone.empty() ? userToUpdate->phoneNumber : newPhone,
                           auth.getCurrentUser()); // Pass admin user as requester
}

void handleAdminFundWallet(AuthService& auth, WalletService& walletSvc) {
    long long targetWalletId;
    double amount;
    std::string description;

    std::cout << "\n--- Nap Diem Vao Vi Nguoi Dung (Tu Vi Tong) ---" << std::endl;
    std::cout << "Nhap ID Vi nguoi nhan: ";
    std::cin >> targetWalletId;
     if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cerr << "ID Vi khong hop le." << std::endl;
        return;
    }
    std::cout << "Nhap so diem muon nap: ";
    std::cin >> amount;
     if (std::cin.fail()) {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cerr << "So diem khong hop le." << std::endl;
        return;
    }
    std::cout << "Nhap mo ta (vi du: Thuong su kien XYZ): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, description);

    walletSvc.fundWalletFromMaster(targetWalletId, amount, description, auth.getCurrentUser());
}

void handleAdminLockUnlockUser(DataStorage& storage) {
    std::string username;
    std::cout << "\n--- Khoa/Mo Khoa Tai Khoan Nguoi Dung ---" << std::endl;
    std::cout << "Nhap ten dang nhap cua nguoi dung: ";
    std::cin >> username;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    UserAccount* user = storage.findUser(username);
    if (!user) {
        std::cerr << "Khong tim thay nguoi dung: " << username << std::endl;
        return;
    }

    if (user->username == "admin") { // Prevent locking the main admin
        std::cout << "Khong the khoa/mo khoa tai khoan admin chinh." << std::endl;
        return;
    }


    std::cout << "Tai khoan '" << username << "' hien tai dang " << (user->isLocked ? "BI KHOA" : "HOAT DONG") << "." << std::endl;
    std::cout << "Ban muon " << (user->isLocked ? "MO KHOA (m)" : "KHOA (k)") << " tai khoan nay? (Nhap 'm' hoac 'k', bat ky phim nao khac de huy): ";
    char choice;
    std::cin >> choice;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');


    if (choice == 'k' && !user->isLocked) {
        user->isLocked = true;
        user->failedLoginAttempts = MAX_FAILED_LOGIN_ATTEMPTS; // Max out attempts for consistency
        std::cout << "Da khoa tai khoan '" << username << "'." << std::endl;
    } else if (choice == 'm' && user->isLocked) {
        user->isLocked = false;
        user->failedLoginAttempts = 0; // Reset attempts on unlock
        std::cout << "Da mo khoa tai khoan '" << username << "'." << std::endl;
    } else {
        std::cout << "Khong thay doi trang thai khoa." << std::endl;
        return; // No change made
    }
    user->updatedAt = std::chrono::system_clock::now();
    storage.saveUsers(); // Save the change
}