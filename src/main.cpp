#include <iostream>
#include <string>
#include <limits>
#include <vector>
#include <iomanip>
#include <algorithm>

#include "Constants.h"
#include "Utils.h"
#include "DataStorage.h"
#include "AuthService.h"
#include "WalletService.h"

using namespace std;

void showMainMenu(AuthService& auth); // Chỉ để khai báo, logic nằm trong main
void showUserMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage);
void showAdminMenu(AuthService& auth, WalletService& walletSvc, DataStorage& storage);

void handleLogin(AuthService& auth);
void handleRegister(AuthService& auth);
void handleChangePassword(AuthService& auth);
void handleUpdateProfile(AuthService& auth, DataStorage& storage);
void handleSetupOTP(AuthService& auth);
void handleDisableOTP(AuthService& auth);

void handleViewBalance(AuthService& auth, WalletService& walletSvc);
void handleTransferPoints(AuthService& auth, WalletService& walletSvc);
void handleViewTransactionHistory(AuthService& auth, WalletService& walletSvc);

void handleAdminListUsers(DataStorage& storage);
void handleAdminCreateUser(AuthService& auth);
void handleAdminEditUser(AuthService& auth, DataStorage& storage);
void handleAdminFundWallet(AuthService& auth, WalletService& walletSvc);
void handleAdminLockUnlockUser(DataStorage& storage);

int main() {
    DataStorage storage;
    AuthService authSvc(storage);
    WalletService walletSvc(storage, authSvc);

    int choice_main;
    while (true) {
        Utils::clearScreen();
        if (!authSvc.isLoggedIn()) {
            // Logic của showMainMenu được tích hợp ở đây
            cout << "\n===== HE THONG DANG NHAP & VI DIEM THUONG =====" << endl;
            cout << "1. Dang Nhap" << endl;
            cout << "2. Dang Ky" << endl;
            cout << "0. Thoat" << endl;
            cout << "==============================================" << endl;
            cout << "Lua chon cua ban: ";
            cin >> choice_main;
             if (cin.fail()) {
                cin.clear(); // clear input buffer to restore cin to a usable state
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignore last input
                choice_main = -1; // Invalid choice
            } else {
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // consume newline
            }

            switch (choice_main) {
                case 1:
                    handleLogin(authSvc);
                    Utils::pauseExecution(); // Pause sau khi xử lý
                    break;
                case 2:
                    handleRegister(authSvc);
                    Utils::pauseExecution(); // Pause sau khi xử lý
                    break;
                case 0:
                    cout << "Tam biet!" << endl;
                    storage.saveUsers(); // Ensure all data is saved before exit
                    storage.saveWallets();
                    // Utils::pauseExecution(); // Không cần pause khi thoát hẳn
                    return 0;
                default:
                    cout << "Lua chon khong hop le. Vui long thu lai." << endl;
                    Utils::pauseExecution(); // Pause sau thông báo lỗi
            }
        } else {
            UserAccount* currentUser = authSvc.getCurrentUser();
            if (currentUser->isPasswordAutoGenerated) {
                 cout << "Mat khau cua ban la mat khau tu dong sinh." << endl;
                 cout << "Ban PHAI thay doi mat khau truoc khi tiep tuc." << endl;
                 Utils::pauseExecution(); // Dừng để người dùng đọc thông báo
                 Utils::clearScreen();    // Xóa màn hình trước khi yêu cầu đổi mk
                 string newPassword, confirmPassword;
                 do {
                    cout << "Nhap mat khau moi: ";
                    cin >> newPassword;
                    cout << "Xac nhan mat khau moi: ";
                    cin >> confirmPassword;
                    if (newPassword != confirmPassword) {
                        cout << "Mat khau xac nhan khong khop. Vui long thu lai." << endl;
                    }
                 } while (newPassword != confirmPassword);
                 cin.ignore(numeric_limits<streamsize>::max(), '\n');
                 authSvc.forceChangePassword(currentUser, newPassword);
                 Utils::pauseExecution(); // Dừng sau khi đổi mật khẩu
                 // Vòng lặp chính sẽ tự động hiển thị menu phù hợp tiếp theo
            }

            // Sau khi xử lý isPasswordAutoGenerated (nếu có), kiểm tra lại trạng thái đăng nhập
            // vì người dùng có thể đã bị đăng xuất nếu có lỗi (ít khả năng ở đây)
            if (authSvc.isLoggedIn()) {
                 if (currentUser->role == UserRole::ADMIN_USER) {
                    showAdminMenu(authSvc, walletSvc, storage);
                } else {
                    showUserMenu(authSvc, walletSvc, storage);
                }
            }
            // Không còn Utils::pauseExecution() ở đây nữa
        }
    }
    return 0;
}

// Hàm showMainMenu không cần định nghĩa riêng nữa vì logic đã ở trong main()

void showUserMenu(AuthService& auth_ref, WalletService& walletSvc_ref, DataStorage& storage_ref) {
    int choice_user_menu;
    UserAccount* user = auth_ref.getCurrentUser();

    // Vòng lặp cho menu người dùng, chỉ thoát khi người dùng chọn đăng xuất
    // hoặc có lỗi nghiêm trọng khiến auth_ref.isLoggedIn() trả về false
    while(auth_ref.isLoggedIn() && user && user->role == UserRole::REGULAR_USER) { // Kiểm tra lại user và role
        Utils::clearScreen();
        user = auth_ref.getCurrentUser(); // Cập nhật con trỏ user phòng trường hợp đối tượng thay đổi
        if (!user) { // Nếu user bị null (ví dụ do lỗi nào đó), đăng xuất và thoát
            auth_ref.logout();
            break;
        }

        cout << "\n===== MENU NGUOI DUNG (" << user->username << ") =====" << endl;
        cout << "--- Tai Khoan ---" << endl;
        cout << "1. Xem Thong Tin Ca Nhan" << endl;
        cout << "2. Cap Nhat Thong Tin Ca Nhan" << endl;
        cout << "3. Doi Mat Khau" << endl;
        cout << "4. Thiet Lap/Quan Ly OTP" << endl;
        cout << "--- Vi Diem ---" << endl;
        cout << "5. Xem So Du Vi" << endl;
        cout << "6. Chuyen Diem" << endl;
        cout << "7. Xem Lich Su Giao Dich" << endl;
        cout << "--------------------------" << endl;
        cout << "0. Dang Xuat" << endl;
        cout << "==============================================" << endl;
        cout << "Lua chon cua ban: ";
        cin >> choice_user_menu;
        if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            choice_user_menu = -1;
        } else {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        bool should_logout = false;
        switch (choice_user_menu) {
            case 1:
                Utils::clearScreen(); // Xóa màn hình trước khi hiển thị thông tin
                cout << "\n--- Thong Tin Ca Nhan ---" << endl;
                cout << "Ten dang nhap: " << user->username << endl;
                cout << "Ho ten: " << user->fullName << endl;
                cout << "Email: " << user->email << endl;
                cout << "So dien thoai: " << (user->phoneNumber.empty() ? "(chua co)" : user->phoneNumber) << endl;
                cout << "OTP kich hoat: " << (user->isOtpEnabled ? "Co" : "Khong") << endl;
                cout << "ID Vi: " << user->walletId << endl;
                Utils::pauseExecution();
                break;
            case 2: handleUpdateProfile(auth_ref, storage_ref); Utils::pauseExecution(); break;
            case 3: handleChangePassword(auth_ref); Utils::pauseExecution(); break;
            case 4:
                // Vòng lặp con cho menu OTP
                int otpChoice;
                do {
                    Utils::clearScreen();
                    cout << "\n--- Quan Ly OTP ---" << endl;
                    cout << "1. Kich hoat OTP" << endl;
                    cout << "2. Vo hieu hoa OTP" << endl;
                    cout << "0. Quay lai Menu Nguoi Dung" << endl;
                    cout << "Lua chon OTP: ";
                    cin >> otpChoice;
                    if (cin.fail()) {
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        otpChoice = -1;
                    } else {
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    }

                    if (otpChoice == 1) { handleSetupOTP(auth_ref); Utils::pauseExecution(); }
                    else if (otpChoice == 2) { handleDisableOTP(auth_ref); Utils::pauseExecution(); }
                    else if (otpChoice != 0) { cout << "Lua chon OTP khong hop le." << endl; Utils::pauseExecution();}
                } while (otpChoice != 0);
                // Không cần pause ở đây vì vòng lặp chính của showUserMenu sẽ tiếp tục
                break;
            case 5: handleViewBalance(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 6: handleTransferPoints(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 7: handleViewTransactionHistory(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 0:
                auth_ref.logout();
                cout << "Da dang xuat." << endl; // Thêm thông báo
                Utils::pauseExecution();
                should_logout = true; // Đánh dấu để thoát vòng lặp showUserMenu
                break;
            default:
                cout << "Lua chon khong hop le." << endl;
                Utils::pauseExecution();
        }
        if(should_logout) break; // Thoát khỏi vòng lặp showUserMenu nếu đã đăng xuất
    }
}

void showAdminMenu(AuthService& auth_ref, WalletService& walletSvc_ref, DataStorage& storage_ref) {
    int choice_admin_menu;
    UserAccount* admin = auth_ref.getCurrentUser();

    while(auth_ref.isLoggedIn() && admin && admin->role == UserRole::ADMIN_USER) {
        Utils::clearScreen();
        admin = auth_ref.getCurrentUser(); // Cập nhật con trỏ admin
        if (!admin) { // Nếu admin bị null, đăng xuất và thoát
            auth_ref.logout();
            break;
        }


        cout << "\n===== MENU QUAN TRI VIEN (" << admin->username << ") =====" << endl;
        cout << "--- Tai Khoan Ca Nhan Admin ---" << endl;
        cout << "1. Xem Thong Tin Ca Nhan" << endl;
        cout << "2. Cap Nhat Thong Tin Ca Nhan" << endl;
        cout << "3. Doi Mat Khau" << endl;
        cout << "4. Thiet Lap/Quan Ly OTP (cho tai khoan admin)" << endl;
        cout << "--- Quan Ly Nguoi Dung ---" << endl;
        cout << "10. Liet Ke Danh Sach Nguoi Dung" << endl;
        cout << "11. Tao Tai Khoan Nguoi Dung Moi" << endl;
        cout << "12. Chinh Sua Thong Tin Nguoi Dung (lam ho)" << endl;
        cout << "13. Khoa/Mo Khoa Tai Khoan Nguoi Dung" << endl;
        cout << "--- Quan Ly Vi Diem ---" << endl;
        cout << "20. Xem So Du Vi (cua admin)" << endl;
        cout << "21. Chuyen Diem (tu vi admin)" << endl;
        cout << "22. Xem Lich Su Giao Dich (cua admin)" << endl;
        cout << "23. Nap Diem Vao Vi Nguoi Dung (tu Vi Tong)" << endl;
        cout << "--------------------------" << endl;
        cout << "0. Dang Xuat" << endl;
        cout << "==============================================" << endl;
        cout << "Lua chon cua ban: ";
        cin >> choice_admin_menu;
         if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            choice_admin_menu = -1;
        } else {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        bool should_logout_admin = false;
        switch (choice_admin_menu) {
            case 1:
                Utils::clearScreen();
                cout << "\n--- Thong Tin Ca Nhan Admin ---" << endl;
                cout << "Ten dang nhap: " << admin->username << endl;
                cout << "Ho ten: " << admin->fullName << endl;
                cout << "Email: " << admin->email << endl;
                cout << "So dien thoai: " << (admin->phoneNumber.empty() ? "(chua co)" : admin->phoneNumber) << endl;
                cout << "OTP kich hoat: " << (admin->isOtpEnabled ? "Co" : "Khong") << endl;
                cout << "ID Vi: " << admin->walletId << endl;
                Utils::pauseExecution();
                break;
            case 2: handleUpdateProfile(auth_ref, storage_ref); Utils::pauseExecution(); break;
            case 3: handleChangePassword(auth_ref); Utils::pauseExecution(); break;
            case 4:
                int otpChoiceAdmin;
                do {
                    Utils::clearScreen();
                    cout << "\n--- Quan Ly OTP cho Admin ---" << endl;
                    cout << "1. Kich hoat OTP" << endl;
                    cout << "2. Vo hieu hoa OTP" << endl;
                    cout << "0. Quay lai Menu Admin" << endl;
                    cout << "Lua chon OTP: ";
                    cin >> otpChoiceAdmin;
                    if (cin.fail()) {
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        otpChoiceAdmin = -1;
                    } else {
                         cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    }

                    if (otpChoiceAdmin == 1) { handleSetupOTP(auth_ref); Utils::pauseExecution(); }
                    else if (otpChoiceAdmin == 2) { handleDisableOTP(auth_ref); Utils::pauseExecution(); }
                    else if (otpChoiceAdmin != 0) { cout << "Lua chon OTP khong hop le." << endl; Utils::pauseExecution(); }
                } while (otpChoiceAdmin != 0);
                break;
            case 10: handleAdminListUsers(storage_ref); Utils::pauseExecution(); break;
            case 11: handleAdminCreateUser(auth_ref); Utils::pauseExecution(); break;
            case 12: handleAdminEditUser(auth_ref, storage_ref); Utils::pauseExecution(); break;
            case 13: handleAdminLockUnlockUser(storage_ref); Utils::pauseExecution(); break;
            case 20: handleViewBalance(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 21: handleTransferPoints(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 22: handleViewTransactionHistory(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 23: handleAdminFundWallet(auth_ref, walletSvc_ref); Utils::pauseExecution(); break;
            case 0:
                auth_ref.logout();
                cout << "Da dang xuat." << endl;
                Utils::pauseExecution();
                should_logout_admin = true;
                break;
            default:
                cout << "Lua chon khong hop le." << endl;
                Utils::pauseExecution();
        }
        if(should_logout_admin) break;
    }
}

void handleLogin(AuthService& auth_ref) {
    string username_param, password_param;
    cout << "\n--- Dang Nhap ---" << endl;
    cout << "Ten dang nhap: ";
    cin >> username_param;
    cout << "Mat khau: ";
    cin >> password_param;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    auth_ref.login(username_param, password_param);
}

void handleRegister(AuthService& auth_ref) {
    string username_param, password_param, fullName_param, email_param, phone_param;
    cout << "\n--- Dang Ky Tai Khoan Moi ---" << endl;
    cout << "Ten dang nhap: ";
    cin >> username_param;
    cout << "Mat khau (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
    cin >> password_param;
    cout << "Ho ten day du: ";
    if (cin.peek() == '\n') {
        cin.ignore();
    }
    getline(cin, fullName_param);
    cout << "Email: ";
    cin >> email_param;
    cout << "So dien thoai (bo trong neu khong co): ";
    if (cin.peek() == '\n') {
        cin.ignore();
    }
    getline(cin, phone_param);

    auth_ref.registerUser(username_param, password_param, fullName_param, email_param, phone_param);
}

void handleChangePassword(AuthService& auth_ref) {
    if (!auth_ref.isLoggedIn()) {
        cout << "Ban can dang nhap de thuc hien chuc nang nay." << endl;
        return;
    }
    string oldPassword, newPassword, confirmPassword;
    cout << "\n--- Doi Mat Khau ---" << endl;
    cout << "Mat khau cu: ";
    cin >> oldPassword;
    do {
        cout << "Mat khau moi (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
        cin >> newPassword;
        cout << "Xac nhan mat khau moi: ";
        cin >> confirmPassword;
        if (newPassword != confirmPassword) {
            cout << "Mat khau xac nhan khong khop. Vui long thu lai." << endl;
        }
    } while (newPassword != confirmPassword);
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    auth_ref.changePassword(auth_ref.getCurrentUser(), oldPassword, newPassword);
}

void handleUpdateProfile(AuthService& auth_ref, DataStorage& storage_ref) {
    if (!auth_ref.isLoggedIn()) {
        cout << "Ban can dang nhap de thuc hien chuc nang nay." << endl;
        return;
    }
    UserAccount* userToUpdate = auth_ref.getCurrentUser();
    string fullName_param, email_param, phone_param;

    cout << "\n--- Cap Nhat Thong Tin Ca Nhan ---" << endl;
    cout << "Ho ten hien tai: " << userToUpdate->fullName << endl;
    cout << "Nhap ho ten moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, fullName_param);

    cout << "Email hien tai: " << userToUpdate->email << endl;
    cout << "Nhap email moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, email_param);

    cout << "So dien thoai hien tai: " << (userToUpdate->phoneNumber.empty() ? "(chua co)" : userToUpdate->phoneNumber) << endl;
    cout << "Nhap so dien thoai moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, phone_param);

    auth_ref.updateUserProfile(userToUpdate,
                           fullName_param.empty() ? userToUpdate->fullName : fullName_param,
                           email_param.empty() ? userToUpdate->email : email_param,
                           phone_param.empty() ? userToUpdate->phoneNumber : phone_param);
}

void handleSetupOTP(AuthService& auth_ref) {
    if (!auth_ref.isLoggedIn()) return;
    auth_ref.setupOTP(auth_ref.getCurrentUser());
}
void handleDisableOTP(AuthService& auth_ref) {
     if (!auth_ref.isLoggedIn()) return;
    auth_ref.disableOTP(auth_ref.getCurrentUser(), "");
}

void handleViewBalance(AuthService& auth_ref, WalletService& walletSvc_ref) {
    if (!auth_ref.isLoggedIn()) return;
    walletSvc_ref.viewBalance(auth_ref.getCurrentUser());
}

void handleTransferPoints(AuthService& auth_ref, WalletService& walletSvc_ref) {
    if (!auth_ref.isLoggedIn()) return;
    long long recipientWalletId;
    double amount_param;
    string description_param;

    cout << "\n--- Chuyen Diem ---" << endl;
    cout << "Nhap ID Vi nguoi nhan: ";
    cin >> recipientWalletId;
    if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cerr << "ID Vi khong hop le." << endl;
        return;
    }
    cout << "Nhap so diem muon chuyen: ";
    cin >> amount_param;
     if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cerr << "So diem khong hop le." << endl;
        return;
    }
    cout << "Nhap mo ta giao dich (bo trong neu khong co): ";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, description_param);

    walletSvc_ref.transferPoints(auth_ref.getCurrentUser(), recipientWalletId, amount_param, description_param);
}

void handleViewTransactionHistory(AuthService& auth_ref, WalletService& walletSvc_ref) {
    if (!auth_ref.isLoggedIn()) return;
    walletSvc_ref.viewTransactionHistory(auth_ref.getCurrentUser());
}

void handleAdminListUsers(DataStorage& storage_ref) {
    Utils::clearScreen();
    cout << "\n--- Danh Sach Nguoi Dung ---" << endl;
    cout << left << setw(20) << "Ten Dang Nhap"
              << setw(30) << "Ho Ten"
              << setw(30) << "Email"
              << setw(15) << "Vai Tro"
              << setw(10) << "Bi Khoa" << endl;
    cout << string(105, '-') << endl;

    if (storage_ref.users.empty()) {
        cout << "Khong co nguoi dung nao trong he thong." << endl;
    } else {
        for (const auto& user_account : storage_ref.users) {
            cout << left << setw(20) << user_account.username
                      << setw(30) << user_account.fullName
                      << setw(30) << user_account.email
                      << setw(15) << (user_account.role == UserRole::ADMIN_USER ? "Admin" : "User")
                      << setw(10) << (user_account.isLocked ? "Co" : "Khong") << endl;
        }
    }
    cout << "--------------------------" << endl;
}

void handleAdminCreateUser(AuthService& auth_ref) {
    string username_param, password_param, fullName_param, email_param, phone_param, roleStr_param;
    UserRole role_val = UserRole::REGULAR_USER;
    bool autoPass = false;

    cout << "\n--- Tao Tai Khoan Nguoi Dung Moi (Admin) ---" << endl;
    cout << "Ten dang nhap: "; cin >> username_param;
    cout << "Ho ten day du: ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, fullName_param);
    cout << "Email: "; cin >> email_param;
    cout << "So dien thoai (bo trong neu khong co): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, phone_param);
    cout << "Vai tro (USER/ADMIN) [USER]: ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, roleStr_param);
    if (roleStr_param == "ADMIN" || roleStr_param == "admin") role_val = UserRole::ADMIN_USER;

    char choiceAutoPass;
    cout << "Tu dong tao mat khau? (y/n) [y]: ";
    cin >> choiceAutoPass;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    if (choiceAutoPass == 'y' || choiceAutoPass == 'Y' || choiceAutoPass == '\n') {
        autoPass = true;
        password_param = Utils::generateRandomPassword();
        cout << "Mat khau tu dong tao: " << password_param << endl;
    } else {
        cout << "Nhap mat khau (it nhat " << MIN_PASSWORD_LENGTH << " ky tu): ";
        cin >> password_param;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    auth_ref.registerUser(username_param, password_param, fullName_param, email_param, phone_param, role_val, autoPass, auth_ref.getCurrentUser());
}

void handleAdminEditUser(AuthService& auth_ref, DataStorage& storage_ref) {
    string usernameToEdit;
    cout << "\n--- Chinh Sua Thong Tin Nguoi Dung (Admin) ---" << endl;
    cout << "Nhap ten dang nhap cua nguoi dung can chinh sua: ";
    cin >> usernameToEdit;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    UserAccount* userToUpdate = storage_ref.findUser(usernameToEdit);
    if (!userToUpdate) {
        cerr << "Khong tim thay nguoi dung: " << usernameToEdit << endl;
        return;
    }

    string newFullName, newEmail, newPhone;
    cout << "Thong tin hien tai cua " << usernameToEdit << ":" << endl;
    cout << "  Ho ten: " << userToUpdate->fullName << endl;
    cout << "  Email: " << userToUpdate->email << endl;
    cout << "  So dien thoai: " << (userToUpdate->phoneNumber.empty() ? "(chua co)" : userToUpdate->phoneNumber) << endl;

    cout << "Nhap ho ten moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, newFullName);
    cout << "Nhap email moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, newEmail);
    cout << "Nhap so dien thoai moi (bo trong de giu nguyen): ";
    if (cin.peek() == '\n') cin.ignore();
    getline(cin, newPhone);

    auth_ref.updateUserProfile(userToUpdate,
                           newFullName.empty() ? userToUpdate->fullName : newFullName,
                           newEmail.empty() ? userToUpdate->email : newEmail,
                           newPhone.empty() ? userToUpdate->phoneNumber : newPhone,
                           auth_ref.getCurrentUser());
}

void handleAdminFundWallet(AuthService& auth_ref, WalletService& walletSvc_ref) {
    long long targetWalletId;
    double amount_param;
    string description_param;

    cout << "\n--- Nap Diem Vao Vi Nguoi Dung (Tu Vi Tong) ---" << endl;
    cout << "Nhap ID Vi nguoi nhan: ";
    cin >> targetWalletId;
     if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cerr << "ID Vi khong hop le." << endl;
        return;
    }
    cout << "Nhap so diem muon nap: ";
    cin >> amount_param;
     if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cerr << "So diem khong hop le." << endl;
        return;
    }
    cout << "Nhap mo ta (vi du: Thuong su kien XYZ): ";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, description_param);

    walletSvc_ref.fundWalletFromMaster(targetWalletId, amount_param, description_param, auth_ref.getCurrentUser());
}

void handleAdminLockUnlockUser(DataStorage& storage_ref) {
    string username_param;
    cout << "\n--- Khoa/Mo Khoa Tai Khoan Nguoi Dung ---" << endl;
    cout << "Nhap ten dang nhap cua nguoi dung: ";
    cin >> username_param;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    UserAccount* user_account = storage_ref.findUser(username_param);
    if (!user_account) {
        cerr << "Khong tim thay nguoi dung: " << username_param << endl;
        return;
    }

    if (user_account->username == "admin") {
        cout << "Khong the khoa/mo khoa tai khoan admin chinh." << endl;
        return;
    }

    cout << "Tai khoan '" << username_param << "' hien tai dang " << (user_account->isLocked ? "BI KHOA" : "HOAT DONG") << "." << endl;
    cout << "Ban muon " << (user_account->isLocked ? "MO KHOA (m)" : "KHOA (k)") << " tai khoan nay? (Nhap 'm' hoac 'k', bat ky phim nao khac de huy): ";
    char choice_lock;
    cin >> choice_lock;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    if (choice_lock == 'k' && !user_account->isLocked) {
        user_account->isLocked = true;
        user_account->failedLoginAttempts = MAX_FAILED_LOGIN_ATTEMPTS;
        cout << "Da khoa tai khoan '" << username_param << "'." << endl;
    } else if (choice_lock == 'm' && user_account->isLocked) {
        user_account->isLocked = false;
        user_account->failedLoginAttempts = 0;
        cout << "Da mo khoa tai khoan '" << username_param << "'." << endl;
    } else {
        cout << "Khong thay doi trang thai khoa." << endl;
        return;
    }
    user_account->updatedAt = chrono::system_clock::now();
    storage_ref.saveUsers();
}
