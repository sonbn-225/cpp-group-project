#include "UserAccount.h"
#include "Utils.h" // For time_point_to_string and string_to_time_point

UserAccount::UserAccount()
    : role(UserRole::REGULAR_USER), isPasswordAutoGenerated(false),
      isOtpEnabled(false), walletId(-1), failedLoginAttempts(0), isLocked(false) {
    createdAt = std::chrono::system_clock::now();
    updatedAt = createdAt;
}

UserAccount::UserAccount(std::string uname, std::string pass, std::string fName, std::string mail,
                         UserRole r, std::string phone, long long wId, bool autoPass)
    : username(std::move(uname)), fullName(std::move(fName)), email(std::move(mail)),
      role(r), phoneNumber(std::move(phone)), walletId(wId),
      isPasswordAutoGenerated(autoPass), isOtpEnabled(false),
      failedLoginAttempts(0), isLocked(false) {
    salt = Utils::generateSalt();
    hashedPassword = Utils::mockHashPassword(pass, salt); // Pass plain password here
    createdAt = std::chrono::system_clock::now();
    updatedAt = createdAt;
}

// JSON serialization/deserialization
void to_json(json& j, const UserAccount& u) {
    j = json{
        {"username", u.username},
        {"hashedPassword", u.hashedPassword},
        {"salt", u.salt},
        {"fullName", u.fullName},
        {"email", u.email},
        {"phoneNumber", u.phoneNumber},
        {"role", u.role},
        {"isPasswordAutoGenerated", u.isPasswordAutoGenerated},
        {"otpSecretKey", u.otpSecretKey},
        {"isOtpEnabled", u.isOtpEnabled},
        {"walletId", u.walletId},
        {"createdAt", Utils::time_point_to_string(u.createdAt)},
        {"updatedAt", Utils::time_point_to_string(u.updatedAt)},
        {"failedLoginAttempts", u.failedLoginAttempts},
        {"isLocked", u.isLocked}
    };
}

void from_json(const json& j, UserAccount& u) {
    j.at("username").get_to(u.username);
    j.at("hashedPassword").get_to(u.hashedPassword);
    j.at("salt").get_to(u.salt);
    j.at("fullName").get_to(u.fullName);
    j.at("email").get_to(u.email);
    j.at("phoneNumber").get_to(u.phoneNumber);
    j.at("role").get_to(u.role);
    j.at("isPasswordAutoGenerated").get_to(u.isPasswordAutoGenerated);
    j.at("otpSecretKey").get_to(u.otpSecretKey);
    j.at("isOtpEnabled").get_to(u.isOtpEnabled);
    j.at("walletId").get_to(u.walletId);
    u.createdAt = Utils::string_to_time_point(j.at("createdAt").get<std::string>());
    u.updatedAt = Utils::string_to_time_point(j.at("updatedAt").get<std::string>());
    j.at("failedLoginAttempts").get_to(u.failedLoginAttempts);
    j.at("isLocked").get_to(u.isLocked);
}