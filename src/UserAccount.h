#ifndef USERACCOUNT_H
#define USERACCOUNT_H

#include <string>
#include <chrono>
#include "../json.hpp" // nlohmann/json

using json = nlohmann::json;

enum class UserRole {
    REGULAR_USER,
    ADMIN_USER
};

// For JSON serialization of UserRole
NLOHMANN_JSON_SERIALIZE_ENUM(UserRole, {
    {UserRole::REGULAR_USER, "REGULAR_USER"},
    {UserRole::ADMIN_USER, "ADMIN_USER"}
})

class UserAccount {
public:
    std::string username;
    std::string hashedPassword;
    std::string salt;
    std::string fullName;
    std::string email;
    std::string phoneNumber;
    UserRole role;
    bool isPasswordAutoGenerated;
    std::string otpSecretKey;
    bool isOtpEnabled;
    long long walletId;

    std::chrono::system_clock::time_point createdAt;
    std::chrono::system_clock::time_point updatedAt;
    int failedLoginAttempts;
    bool isLocked;

    UserAccount(); // Default constructor for JSON deserialization
    UserAccount(std::string uname, std::string pass, std::string fName, std::string mail,
                UserRole r = UserRole::REGULAR_USER, std::string phone = "", long long wId = -1, bool autoPass = false);

    // JSON serialization/deserialization
    friend void to_json(json& j, const UserAccount& u);
    friend void from_json(const json& j, UserAccount& u);
};

#endif // USERACCOUNT_H